[{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://n-kall.github.io/priorsense/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://n-kall.github.io/priorsense/articles/powerscaling.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Power-scaling sensitivity analysis","text":"priorsense package prior diagnostics Bayesian models. currently implements power-scaling sensitivity analysis may extended future include diagnostics.","code":""},{"path":"https://n-kall.github.io/priorsense/articles/powerscaling.html","id":"power-scaling-sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Power-scaling sensitivity analysis","title":"Power-scaling sensitivity analysis","text":"Power-scaling sensitivity analysis tries determine small changes prior likelihood affect posterior. done power-scaling prior likelihood raising α>0\\alpha > 0. prior power-scaling: p(θ∣y)∝p(θ)αp(y∣θ)p(\\theta \\mid y) \\propto p(\\theta)^\\alpha p(y \\mid \\theta) likelihood power-scaling: p(θ∣y)∝p(θ)p(y∣θ)αp(\\theta \\mid y) \\propto p(\\theta) p(y \\mid \\theta)^\\alpha priorsense, done computationally efficient manner using Pareto-smoothed importance sampling (optionally importance weighted moment matching) estimate properties perturbed posteriors. Sensitivity can quantified considering much perturbed posteriors differ base posterior.","code":""},{"path":"https://n-kall.github.io/priorsense/articles/powerscaling.html","id":"example-power-scaling-sensitivity-analysis","dir":"Articles","previous_headings":"Power-scaling sensitivity analysis","what":"Example power-scaling sensitivity analysis","title":"Power-scaling sensitivity analysis","text":"Consider following model (available via example_powerscale_model(\"univariate_normal\"): y∼normal(μ,σ)y \\sim \\text{normal}(\\mu, \\sigma)μ∼normal(0,1)\\mu \\sim \\text{normal}(0, 1)σ∼normal+(0,2.5)\\sigma \\sim \\text{normal}^+(0, 2.5) 100 data points yy first fit model using Stan: Next, check sensitivity prior likelihood power-scaling. sensitivity values shown indication much posterior changes respect power-scaling. Larger values indicate sensitivity. default values derived gradient Cumulative Jensen-Shannon distance base posterior posteriors resulting power-scaling. , see pattern sensitivity indicates prior-data conflict μ\\mu. follow visualisation. first create powerscaled_sequence object, contains estimates posteriors range power-scaling amounts. three plots currently available: Kernel density estimates:  Empirical cumulative distribution functions:  Quantities:  can seen plots, power-scaling prior likelihood opposite direction effects posterior. evidence prior-data conflict. Indeed, inspect raw data, see prior μ\\mu, normal(0,1)\\text{normal}(0, 1) match well mean data, whereas prior σ\\sigma, normal+(0,2.5)\\text{normal}^+(0, 2.5) reasonable:","code":"library(priorsense) library(rstan) data {   int<lower=1> N;   array[N] real y; } parameters {   real mu;   real<lower=0> sigma; } model {   // priors   target += normal_lpdf(mu | 0, 1);   target += normal_lpdf(sigma | 0, 2.5);   // likelihood   target += normal_lpdf(y | mu, sigma); } generated quantities {   vector[N] log_lik;   real lprior;   // log likelihood   for (n in 1:N) log_lik[n] =  normal_lpdf(y[n] | mu, sigma);   // joint log prior   lprior = normal_lpdf(mu | 0, 1) + normal_lpdf(sigma | 0, 2.5); } normal_model <- example_powerscale_model(\"univariate_normal\")  fit <- stan(   model_code = normal_model$model_code,   data = normal_model$data,   refresh = FALSE,   seed = 123 ) powerscale_sensitivity(fit, variable = c(\"mu\", \"sigma\")) #> Sensitivity based on cjs_dist: #> # A tibble: 2 × 4 #>   variable prior likelihood diagnosis           #>   <chr>    <dbl>      <dbl> <chr>               #> 1 mu       0.435      0.644 prior-data conflict #> 2 sigma    0.361      0.677 prior-data conflict powerscale_plot_dens(fit, variable = \"mu\", facet_rows = \"variable\") powerscale_plot_ecdf(fit, variable = \"mu\", facet_rows = \"variable\") powerscale_plot_quantities(fit, variable = \"mu\") mean(normal_model$data$y) #> [1] 9.844 sd(normal_model$data$y) #> [1] 0.7697835"},{"path":"https://n-kall.github.io/priorsense/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Noa Kallioinen. Author, maintainer, copyright holder. Topi Paananen. Author. Paul-Christian Bürkner. Author. Aki Vehtari. Author. Frank Weber. Contributor.","code":""},{"path":"https://n-kall.github.io/priorsense/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kallioinen, N., Paananen, T., Bürkner, P-C., Vehtari, . (2023). Detecting diagnosing prior likelihood sensitivity power-scaling. Statistics Computing. 34(57). doi:10.1007/s11222-023-10366-5 Aki Vehtari, Daniel Simpson, Andrew Gelman, Yuling Yao, Jonah Gabry (2024). Pareto smoothed importance sampling. Journal Machine Learning Research 25(72) https://jmlr.org/papers/v25/19-556.html Topi Paananen, Juho Piironen, Paul-Christian Bürkner, Aki Vehtari (2021). Implicitly adaptive importance sampling. Statistics Computing, 31(16), 1-19. doi:10.1007/s11222-020-09982-2","code":"@Article{,   title = {Detecting and diagnosing prior and likelihood sensitivity with power-scaling},   author = {Noa Kallioinen and Topi Paananen and Paul-Christian Bürkner and Aki Vehtari},   year = {2023},   journal = {Statistics and Computing},   volume = {34},   issue = {57},   doi = {10.1007/s11222-023-10366-5},   encoding = {UTF-8}, } @Article{,   title = {Pareto smoothed importance sampling},   author = {Aki Vehtari and Daniel Simpson and Andrew Gelman and Yuling Yao and Jonah Gabry},   journal = {Journal of Machine Learning Research},   volume = {25},   issue = {72},   year = {2024}, } @Article{,   title = {Implicitly adaptive importance sampling},   author = {Topi Paananen and Juho Piironen and Paul-Christian Bürkner and Aki Vehtari},   year = {2021},   journal = {Statistics and Computing},   volume = {31},   issue = {16},   pages = {1--19},   doi = {10.1007/s11222-020-09982-2},   encoding = {UTF-8}, }"},{"path":[]},{"path":"https://n-kall.github.io/priorsense/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Prior Diagnostics and Sensitivity Analysis","text":"priorsense provides tools prior diagnostics sensitivity analysis. currently includes functions performing power-scaling sensitivity analysis Stan models. way check sensitive posterior perturbations prior likelihood diagnose cause sensitivity. efficient computation, power-scaling sensitivity analysis relies Pareto smoothed importance sampling (Vehtari et al., 2024) importance weighted moment matching (Paananen et al., 2021). Power-scaling sensitivity analysis priorsense described Kallioinen et al. (2023).","code":""},{"path":"https://n-kall.github.io/priorsense/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prior Diagnostics and Sensitivity Analysis","text":"Download stable version CRAN : Download development version GitHub :","code":"install.packages(\"priorsense\") # install.packages(\"remotes\") remotes::install_github(\"n-kall/priorsense\", ref = \"development\")"},{"path":"https://n-kall.github.io/priorsense/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Prior Diagnostics and Sensitivity Analysis","text":"priorsense works models created rstan, cmdstanr brms, draws objects posterior package.","code":""},{"path":"https://n-kall.github.io/priorsense/index.html","id":"example","dir":"","previous_headings":"Usage","what":"Example","title":"Prior Diagnostics and Sensitivity Analysis","text":"Consider simple univariate model unknown mu sigma fit data y (available viaexample_powerscale_model(\"univariate_normal\")): first fit model using Stan: fit, sensitivity can checked follows: visually inspect changes posterior, use one diagnostic plot functions. Estimates high Pareto-k values may inaccurate indicated.    cases, setting moment_match = TRUE improve unreliable estimates cost computation. requires iwmm package.","code":"data {   int<lower=1> N;   array[N] real y; } parameters {   real mu;   real<lower=0> sigma; } model {   // priors   target += normal_lpdf(mu | 0, 1);   target += normal_lpdf(sigma | 0, 2.5);   // likelihood   target += normal_lpdf(y | mu, sigma); } generated quantities {   vector[N] log_lik;   real lprior;   // log likelihood   for (n in 1:N) log_lik[n] =  normal_lpdf(y[n] | mu, sigma);   // joint log prior   lprior = normal_lpdf(mu | 0, 1) +     normal_lpdf(sigma | 0, 2.5); library(priorsense)  normal_model <- example_powerscale_model(\"univariate_normal\")  fit <- rstan::stan(   model_code = normal_model$model_code,   data = normal_model$data,   refresh = FALSE,   seed = 123 ) powerscale_sensitivity(fit) #> Sensitivity based on cjs_dist: #> # A tibble: 2 × 4 #>   variable prior likelihood diagnosis           #>   <chr>    <dbl>      <dbl> <chr>               #> 1 mu       0.392      0.561 prior-data conflict #> 2 sigma    0.290      0.530 prior-data conflict powerscale_plot_dens(fit) powerscale_plot_ecdf(fit) powerscale_plot_quantities(fit)"},{"path":"https://n-kall.github.io/priorsense/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Prior Diagnostics and Sensitivity Analysis","text":"Noa Kallioinen, Topi Paananen, Paul-Christian Bürkner, Aki Vehtari (2023). Detecting diagnosing prior likelihood sensitivity power-scaling. Statstics Computing. 34, 57. https://doi.org/10.1007/s11222-023-10366-5 Topi Paananen, Juho Piironen, Paul-Christian Bürkner, Aki Vehtari (2021). Implicitly adaptive importance sampling. Statistics Computing 31, 16. https://doi.org/10.1007/s11222-020-09982-2 Aki Vehtari, Daniel Simpson, Andrew Gelman, Yuling Yao, Jonah Gabry (2024). Pareto smoothed importance sampling. Journal Machine Learning Research. 25, 72. https://jmlr.org/papers/v25/19-556.html","code":""},{"path":"https://n-kall.github.io/priorsense/reference/cjs_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Jensen-Shannon divergence — cjs_dist","title":"Cumulative Jensen-Shannon divergence — cjs_dist","text":"Computes cumulative Jensen-Shannon distance two samples.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/cjs_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Jensen-Shannon divergence — cjs_dist","text":"","code":"cjs_dist(   x,   y,   x_weights = NULL,   y_weights = NULL,   metric = TRUE,   unsigned = TRUE,   ... )"},{"path":"https://n-kall.github.io/priorsense/reference/cjs_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Jensen-Shannon divergence — cjs_dist","text":"x numeric vector samples first distribution y numeric vector samples second distribution x_weights numeric vector weights first distribution y_weights numeric vector weights second distribution metric Logical; TRUE, return square-root CJS unsigned Logical; TRUE return max CJS(P(x) || Q(x)) CJS(P(-x) || Q(-x)). ensures invariance transformations PCA. ... unused","code":""},{"path":"https://n-kall.github.io/priorsense/reference/cjs_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative Jensen-Shannon divergence — cjs_dist","text":"distance value based CJS computation.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/cjs_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative Jensen-Shannon divergence — cjs_dist","text":"Cumulative Jensen-Shannon distance symmetric metric based cumulative Jensen-Shannon divergence. divergence CJS(P || Q) two cumulative distribution functions P Q defined : $$CJS(P || Q) = \\sum P(x) \\log \\frac{P(x)}{0.5 (P(x) + Q(x))} + \\frac{1}{2 \\ln 2} \\sum (Q(x) - P(x))$$ symmetric metric defined : $$CJS_{dist}(P || Q) = \\sqrt{CJS(P || Q) + CJS(Q || P)}$$ upper bound \\(\\sqrt{ \\sum (P(x) + Q(x))}\\)","code":""},{"path":"https://n-kall.github.io/priorsense/reference/cjs_dist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cumulative Jensen-Shannon divergence — cjs_dist","text":"Nguyen H-V., Vreeken J. (2015).  Non-parametric Jensen-Shannon Divergence.  : Appice ., Rodrigues P., Santos Costa V., Gama J., Jorge ., Soares C. (eds) Machine Learning Knowledge Discovery Databases.  ECML PKDD 2015. Lecture Notes Computer Science, vol 9285.  Springer, Cham. doi:10.1007/978-3-319-23525-7_11","code":""},{"path":"https://n-kall.github.io/priorsense/reference/cjs_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative Jensen-Shannon divergence — cjs_dist","text":"","code":"x <- rnorm(100) y <- rnorm(100, 2, 2) cjs_dist(x, y, x_weights = NULL, y_weights = NULL) #>       cjs  #> 0.4265529"},{"path":"https://n-kall.github.io/priorsense/reference/create-priorsense-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data structure for priorsense — create-priorsense-data","title":"Create data structure for priorsense — create-priorsense-data","text":"Create data structure contains required data functions priorsense","code":""},{"path":"https://n-kall.github.io/priorsense/reference/create-priorsense-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data structure for priorsense — create-priorsense-data","text":"","code":"create_priorsense_data(x, ...)  # Default S3 method create_priorsense_data(   x,   fit = NULL,   log_prior_fn = log_prior_draws,   log_lik_fn = log_lik_draws,   log_prior = NULL,   log_lik = NULL,   log_ratio_fn = NULL,   ... )  # S3 method for class 'stanfit' create_priorsense_data(x, ...)  # S3 method for class 'CmdStanFit' create_priorsense_data(x, ...)  # S3 method for class 'draws' create_priorsense_data(x, ...)"},{"path":"https://n-kall.github.io/priorsense/reference/create-priorsense-data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data structure for priorsense — create-priorsense-data","text":"x object method defined ... arguments passed methods fit model fit object (used x fit object) log_prior_fn function derive log prior object log_lik_fn function derive log likelihood object log_prior draws log prior log_lik draws log likelihood log_ratio_fn function moment matching","code":""},{"path":"https://n-kall.github.io/priorsense/reference/create-priorsense-data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data structure for priorsense — create-priorsense-data","text":"priorsense_data object, contains data functions run sensitivity analyses.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/create-priorsense-data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data structure for priorsense — create-priorsense-data","text":"","code":"x <- example_powerscale_model() drw <- x$draws  psd <- create_priorsense_data(drw)"},{"path":"https://n-kall.github.io/priorsense/reference/example_powerscale_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Stan model for power-scaling — example_powerscale_model","title":"Example Stan model for power-scaling — example_powerscale_model","text":"Provides example models (data) ready use power-scaling.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/example_powerscale_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Stan model for power-scaling — example_powerscale_model","text":"","code":"example_powerscale_model(model = \"univariate_normal\")"},{"path":"https://n-kall.github.io/priorsense/reference/example_powerscale_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example Stan model for power-scaling — example_powerscale_model","text":"model Character specifying model code return. Currently \"univariate_normal\" \"eight_schools\" implemented.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/example_powerscale_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example Stan model for power-scaling — example_powerscale_model","text":"List containing model code corresponding data.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/example_powerscale_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Stan model for power-scaling — example_powerscale_model","text":"","code":"ex_normal <- example_powerscale_model(model = \"univariate_normal\")  ex_eightschools <- example_powerscale_model(model = \"eight_schools\")"},{"path":"https://n-kall.github.io/priorsense/reference/log_lik_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract log likelihood draws — log_lik_draws","title":"Extract log likelihood draws — log_lik_draws","text":"Extract log likelihood fitted model return draws object.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/log_lik_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract log likelihood draws — log_lik_draws","text":"","code":"log_lik_draws(x, ...)  # S3 method for class 'stanfit' log_lik_draws(x, joint = FALSE, log_lik_name = \"log_lik\", ...)  # S3 method for class 'CmdStanFit' log_lik_draws(x, joint = FALSE, log_lik_name = \"log_lik\", ...)  # S3 method for class 'draws' log_lik_draws(x, joint = FALSE, log_lik_name = \"log_lik\", ...)"},{"path":"https://n-kall.github.io/priorsense/reference/log_lik_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract log likelihood draws — log_lik_draws","text":"x Model fit draws object. ... Arguments passed individual methods. joint Logical indicating whether return joint log likelihood array. Default FALSE. log_lik_name Name parameter Stan model corresponding log likelihood, default \"log_lik\".","code":""},{"path":"https://n-kall.github.io/priorsense/reference/log_lik_draws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract log likelihood draws — log_lik_draws","text":"draws_array object containing log_lik values.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/log_lik_draws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract log likelihood draws — log_lik_draws","text":"","code":"ex <- example_powerscale_model() drw <- ex$draws  log_lik_draws(drw) #> # A draws_array: 1000 iterations, 4 chains, and 25 variables #> , , variable = log_lik[1] #>  #>          chain #> iteration     1     2     3     4 #>         1 -0.98 -0.44 -1.17 -0.76 #>         2 -0.98 -0.57 -1.11 -0.75 #>         3 -0.83 -0.67 -0.75 -0.96 #>         4 -0.98 -0.82 -0.77 -0.96 #>         5 -1.15 -0.78 -0.79 -0.76 #>  #> , , variable = log_lik[2] #>  #>          chain #> iteration    1     2     3     4 #>         1 -1.3 -1.06 -1.41 -0.83 #>         2 -1.2 -1.09 -1.42 -1.19 #>         3 -1.3 -0.65 -1.03 -1.17 #>         4 -1.3 -0.81 -1.00 -1.17 #>         5 -1.5 -0.85 -0.99 -1.27 #>  #> , , variable = log_lik[3] #>  #>          chain #> iteration     1     2     3     4 #>         1 -1.01 -0.66 -1.16 -1.06 #>         2 -1.05 -0.72 -1.09 -0.81 #>         3 -0.84 -1.17 -0.90 -1.04 #>         4 -1.02 -1.14 -0.95 -1.03 #>         5 -1.08 -1.07 -0.97 -0.79 #>  #> , , variable = log_lik[4] #>  #>          chain #> iteration     1     2     3     4 #>         1 -1.01 -0.66 -1.16 -1.06 #>         2 -1.05 -0.72 -1.09 -0.81 #>         3 -0.84 -1.17 -0.90 -1.04 #>         4 -1.02 -1.14 -0.95 -1.03 #>         5 -1.08 -1.07 -0.97 -0.79 #>  #> # ... with 995 more iterations, and 21 more variables"},{"path":"https://n-kall.github.io/priorsense/reference/log_prior_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract log prior draws — log_prior_draws","title":"Extract log prior draws — log_prior_draws","text":"Extract log likelihood fitted model return draws object.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/log_prior_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract log prior draws — log_prior_draws","text":"","code":"log_prior_draws(x, ...)  # S3 method for class 'stanfit' log_prior_draws(x, joint = FALSE, log_prior_name = \"lprior\", ...)  # S3 method for class 'CmdStanFit' log_prior_draws(x, joint = FALSE, log_prior_name = \"lprior\", ...)  # S3 method for class 'draws' log_prior_draws(x, joint = FALSE, log_prior_name = \"lprior\", ...)"},{"path":"https://n-kall.github.io/priorsense/reference/log_prior_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract log prior draws — log_prior_draws","text":"x Model fit draws object. ... Arguments passed individual methods. joint Logical indicating whether return joint log prior array. Default FALSE. log_prior_name Name parameter Stan model corresponding log prior, default \"lprior\".","code":""},{"path":"https://n-kall.github.io/priorsense/reference/log_prior_draws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract log prior draws — log_prior_draws","text":"draws_array object containing log_prior values.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/log_prior_draws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract log prior draws — log_prior_draws","text":"","code":"ex <- example_powerscale_model() drw <- ex$draws  log_prior_draws(drw) #> # A draws_array: 1000 iterations, 4 chains, and 2 variables #> , , variable = lprior[1] #>  #>          chain #> iteration   1   2   3   4 #>         1 -45 -46 -44 -49 #>         2 -46 -46 -44 -45 #>         3 -44 -50 -47 -46 #>         4 -45 -49 -47 -46 #>         5 -42 -49 -47 -45 #>  #> , , variable = lprior[2] #>  #>          chain #> iteration    1    2    3    4 #>         1 -1.9 -1.9 -2.0 -1.9 #>         2 -1.9 -1.9 -1.9 -1.9 #>         3 -1.9 -1.9 -1.9 -1.9 #>         4 -1.9 -1.9 -1.9 -1.9 #>         5 -1.9 -1.9 -1.9 -1.9 #>  #> # ... with 995 more iterations"},{"path":"https://n-kall.github.io/priorsense/reference/measure_divergence.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate specified divergence measures for each posterior — measure_divergence","title":"Calculate specified divergence measures for each posterior — measure_divergence","text":"Calculate specified divergence measures posterior","code":""},{"path":"https://n-kall.github.io/priorsense/reference/measure_divergence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate specified divergence measures for each posterior — measure_divergence","text":"","code":"measure_divergence(draws1, draws2, measure, measure_args = list(), ...)"},{"path":"https://n-kall.github.io/priorsense/reference/measure_divergence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate specified divergence measures for each posterior — measure_divergence","text":"draws1 draws first distribution draws2 draws second distribution measure divergence measure measure_args arguments divergence measure ... unused","code":""},{"path":"https://n-kall.github.io/priorsense/reference/measure_divergence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate specified divergence measures for each posterior — measure_divergence","text":"tibble","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-gradients.html","id":null,"dir":"Reference","previous_headings":"","what":"Power-scale gradients — powerscale-gradients","title":"Power-scale gradients — powerscale-gradients","text":"Calculate numerical derivative posterior quantities/divergence respect power-scaling specified component (prior likelihood). done using importance sampling (optionally moment matching).","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-gradients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power-scale gradients — powerscale-gradients","text":"","code":"powerscale_gradients(x, ...)  # Default S3 method powerscale_gradients(x, ...)  # S3 method for class 'priorsense_data' powerscale_gradients(   x,   variable = NULL,   component = c(\"prior\", \"likelihood\"),   type = c(\"quantities\", \"divergence\"),   lower_alpha = 0.99,   upper_alpha = 1.01,   div_measure = \"cjs_dist\",   measure_args = list(),   moment_match = FALSE,   k_threshold = 0.5,   resample = FALSE,   transform = NULL,   prediction = NULL,   scale = FALSE,   prior_selection = NULL,   likelihood_selection = NULL,   ... )"},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-gradients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power-scale gradients — powerscale-gradients","text":"x Model fit draws object. ... arguments passed functions. variable Variables compute sensitivity . NULL (default) sensitivity computed variables. component Component power-scale (prior likelihood). type type sensitivity measure (\"distance\", \"quantity\").  Multiple options can specified time. lower_alpha lower power scale component , < 1 (default 0.9). upper_alpha upper power scale component , > 1 (default 1.1). div_measure divergence measure use. following methods implemented: \"cjs_dist\": Cumulative Jensen-Shannon distance. Default method. See function cjs_dist details. \"js_dist\": Jensen-Shannon distance. \"js_div\": Jensen-Shannon divergence. \"hellinger_dist\": Hellinger distance. \"kl_dist\": Kullback-Leibler distance. \"kl_div\": Kullback-Leibler divergence. \"ks_dist\": Kolmogorov-Smirnov distance. \"hellinger_dist\": Hellinger distance. \"ws_dist\": Wassterstein distance (pass measure_args = list(p = N)) different order, N order. measure_args Named list arguments passed divergence measure functions. moment_match Logical; Indicate whether moment matching performed. Can TRUE is_method \"psis\". k_threshold Threshold value Pareto k values moment matching algorithm used. Default 0.5. resample Logical; Indicate whether draws resampled based calculated importance weights. transform Indicate transformation posterior draws perform sensitivity analysis. Either \"scale\" \"whiten\". prediction Function taking model fit returning draws_df predictions appended posterior draws scale logical scale quantity gradients base posterior standard deviation. prior_selection Numeric vector specifying priors consider. likelihood_selection Numeric vector specifying likelihoods consider.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-gradients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power-scale gradients — powerscale-gradients","text":"Maximum absolute derivatives alpha = 1.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-gradients.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power-scale gradients — powerscale-gradients","text":"","code":"ex <- example_powerscale_model() drw <- ex$draws  powerscale_gradients(drw) #> $multivariate_divergence #> $multivariate_divergence$prior #> NULL #>  #> $multivariate_divergence$likelihood #> NULL #>  #>  #> $divergence #> $divergence$prior #> # A tibble: 2 × 2 #>   variable cjs_dist #>   <chr>       <dbl> #> 1 mu          0.435 #> 2 sigma       0.361 #>  #> $divergence$likelihood #> # A tibble: 2 × 2 #>   variable cjs_dist #>   <chr>       <dbl> #> 1 mu          0.644 #> 2 sigma       0.677 #>  #>  #> $quantities #> $quantities$prior #> # A tibble: 2 × 7 #>   variable   mean median    sd    mad      q5    q95 #>   <chr>     <dbl>  <dbl> <dbl>  <dbl>   <dbl>  <dbl> #> 1 mu       -0.312 -0.228 0.167 0.0916 -0.390  -0.211 #> 2 sigma     0.145  0.143 0.142 0.0480  0.0296  0.272 #>  #> $quantities$likelihood #> # A tibble: 2 × 7 #>   variable   mean median     sd    mad       q5    q95 #>   <chr>     <dbl>  <dbl>  <dbl>  <dbl>    <dbl>  <dbl> #> 1 mu        0.397  0.299 -0.318 -0.167  0.643    0.173 #> 2 sigma    -0.246 -0.210 -0.292 -0.147 -0.00776 -0.451 #>  #>  #> $loadings #> NULL #>"},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-overview.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior/likelihood power-scaling perturbation — powerscale-overview","title":"Prior/likelihood power-scaling perturbation — powerscale-overview","text":"Estimate posterior draws based power-scaling perturbations prior likelihood using importance sampling (optionally moment matching).","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-overview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior/likelihood power-scaling perturbation — powerscale-overview","text":"","code":"powerscale(x, ...)  # Default S3 method powerscale(   x,   component,   alpha,   moment_match = FALSE,   k_threshold = NULL,   resample = FALSE,   transform = NULL,   prediction = NULL,   variable = NULL,   selection = NULL,   ... )  # S3 method for class 'priorsense_data' powerscale(   x,   component,   alpha,   moment_match = FALSE,   k_threshold = NULL,   resample = FALSE,   transform = NULL,   prediction = NULL,   variable = NULL,   selection = NULL,   ... )  powerscale_sequence(x, ...)  # Default S3 method powerscale_sequence(   x,   lower_alpha = 0.8,   upper_alpha = 1/lower_alpha,   length = 3,   variable = NULL,   component = c(\"prior\", \"likelihood\"),   moment_match = FALSE,   k_threshold = 0.5,   resample = FALSE,   transform = NULL,   prediction = NULL,   auto_alpha_range = FALSE,   symmetric = TRUE,   prior_selection = NULL,   likelihood_selection = NULL,   ... )  # S3 method for class 'priorsense_data' powerscale_sequence(   x,   lower_alpha = 0.8,   upper_alpha = 1/lower_alpha,   length = 3,   variable = NULL,   component = c(\"prior\", \"likelihood\"),   moment_match = FALSE,   k_threshold = 0.5,   resample = FALSE,   transform = NULL,   prediction = NULL,   auto_alpha_range = FALSE,   symmetric = TRUE,   prior_selection = NULL,   likelihood_selection = NULL,   ... )"},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-overview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior/likelihood power-scaling perturbation — powerscale-overview","text":"x fitted model object. ... arguments passed internal functions. component Component power-scaled (either \"prior\" \"likelihood\"). powerscale_sequence, can \"prior\" \"likelihood\". alpha Value power-scale specified component. (likelihood/prior). moment_match Logical; Indicate whether moment matching performed. Can TRUE is_method \"psis\". k_threshold Threshold value Pareto k values moment matching algorithm used. Default 0.5. resample Logical; Indicate whether draws resampled based calculated importance weights. transform Indicate transformation posterior draws perform sensitivity analysis. Either \"scale\" \"whiten\". prediction Function taking model fit returning draws_df predictions appended posterior draws variable Vector variable names return estimated posterior draws . NULL variables included. selection Numeric vector specifying partitions component included power-scaling. Default NULL, takes partitions. lower_alpha Lower power-scaling alpha value sequence. upper_alpha Upper power-scaling alpha value sequence. length Length alpha sequence. auto_alpha_range Boolean. Restrict range ensure Pareto-k values threshold? symmetric Boolean. alpha range symmetrical around alpha = 1, log-space? prior_selection Numeric vector prior partitions include power-scaling. Default NULL, takes partitions. likelihood_selection Numeric vector likelihood partitions include power-scaling. Default NULL, takes partitions.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-overview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior/likelihood power-scaling perturbation — powerscale-overview","text":"powerscaled_draws powerscaled_sequence object, contains estimated posterior draws resulting power-scaling perturbations details perturbation estimation methods.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-overview.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prior/likelihood power-scaling perturbation — powerscale-overview","text":"Kallioinen, N., Paananen, T., Bürkner, P-C., Vehtari, . (2023). Detecting diagnosing prior likelihood sensitivity power-scaling perturbations.  Statistics Computing. 34(57).  doi:10.1007/s11222-023-10366-5 Vehtari, ., Simpson, D., Gelman, ., Yao, Y., Gabry, J. (2024).  Pareto smoothed importance sampling. Journal Machine Learning Research. 25(72). https://jmlr.org/papers/v25/19-556.html Paananen, T., Piironen, J., Bürkner, P-C., Vehtari, . (2021). Implicitly adaptive importance sampling.  Statistics Computing. 31(16).  doi:10.1007/s11222-020-09982-2","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-overview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prior/likelihood power-scaling perturbation — powerscale-overview","text":"","code":"ex <- example_powerscale_model()  powerscale(ex$draws, component = \"prior\", alpha = 0.5) #> # A draws_df: 1000 iterations, 4 chains, and 2 variables #>     mu sigma #> 1  9.4  1.05 #> 2  9.5  1.06 #> 3  9.3  0.90 #> 4  9.4  1.06 #> 5  9.1  1.18 #> 6  9.2  1.06 #> 7  9.5  1.04 #> 8  9.7  0.60 #> 9  9.7  0.65 #> 10 9.5  0.77 #> # ... with 3990 more draws #> # ... hidden reserved variables {'.log_weight', '.chain', '.iteration', '.draw'} #>  #> power-scaling #>  alpha: 0.5  #>  scaled component: prior  #>  pareto-k: 0.2  #>  pareto-k threshold: 0.72  #>  resampled: FALSE  #>  transform: identity   powerscale_sequence(ex$draws) #> base draws: #> # A draws_df: 1000 iterations, 4 chains, and 2 variables #>     mu sigma #> 1  9.4  1.05 #> 2  9.5  1.06 #> 3  9.3  0.90 #> 4  9.4  1.06 #> 5  9.1  1.18 #> 6  9.2  1.06 #> 7  9.5  1.04 #> 8  9.7  0.60 #> 9  9.7  0.65 #> 10 9.5  0.77 #> # ... with 3990 more draws #> # ... hidden reserved variables {'.chain', '.iteration', '.draw'} #>  #> power-scaling #>  alpha range: [0.8, 1.25] #>  length of sequence: 2  #>  scaled component: likelihood  #>  scaled component: prior  #>  transform: identity"},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Power-scaling sensitivity analysis — powerscale-sensitivity","title":"Power-scaling sensitivity analysis — powerscale-sensitivity","text":"Calculates prior/likelihood sensitivity based power-scaling perturbations. done using importance sampling (optionally moment matching).","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power-scaling sensitivity analysis — powerscale-sensitivity","text":"","code":"powerscale_sensitivity(x, ...)  # Default S3 method powerscale_sensitivity(   x,   variable = NULL,   lower_alpha = 0.99,   upper_alpha = 1.01,   div_measure = \"cjs_dist\",   measure_args = list(),   component = c(\"prior\", \"likelihood\"),   sensitivity_threshold = 0.05,   moment_match = FALSE,   k_threshold = 0.5,   resample = FALSE,   transform = NULL,   prediction = NULL,   prior_selection = NULL,   likelihood_selection = NULL,   num_args = NULL,   ... )  # S3 method for class 'priorsense_data' powerscale_sensitivity(   x,   variable = NULL,   lower_alpha = 0.99,   upper_alpha = 1.01,   div_measure = \"cjs_dist\",   measure_args = list(),   component = c(\"prior\", \"likelihood\"),   sensitivity_threshold = 0.05,   moment_match = FALSE,   k_threshold = 0.5,   resample = FALSE,   transform = NULL,   prediction = NULL,   prior_selection = NULL,   likelihood_selection = NULL,   num_args = NULL,   ... )  # S3 method for class 'CmdStanFit' powerscale_sensitivity(x, ...)  # S3 method for class 'stanfit' powerscale_sensitivity(x, ...)"},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power-scaling sensitivity analysis — powerscale-sensitivity","text":"x Model fit object priorsense_data object. ... arguments passed functions. variable Character vector variables check. lower_alpha Lower alpha value gradient calculation. upper_alpha Upper alpha value gradient calculation. div_measure divergence measure use. following methods implemented: \"cjs_dist\": Cumulative Jensen-Shannon distance. Default method. See function cjs_dist details. \"js_dist\": Jensen-Shannon distance. \"js_div\": Jensen-Shannon divergence. \"hellinger_dist\": Hellinger distance. \"kl_dist\": Kullback-Leibler distance. \"kl_div\": Kullback-Leibler divergence. \"ks_dist\": Kolmogorov-Smirnov distance. \"hellinger_dist\": Hellinger distance. \"ws_dist\": Wassterstein distance (pass measure_args = list(p = N)) different order, N order. measure_args Named list arguments passed divergence measure functions. component Character vector specifying component(s) scale (default \"prior\" \"likelihood\"). sensitivity_threshold Threshold flagging variable sensitive power-scaling. moment_match Logical; Indicate whether moment matching performed. Can TRUE is_method \"psis\". k_threshold Threshold value Pareto k values moment matching algorithm used. Default 0.5. resample Logical; Indicate whether draws resampled based calculated importance weights. transform Indicate transformation posterior draws perform sensitivity analysis. Either \"scale\" \"whiten\". prediction Function taking model fit returning draws_df predictions appended posterior draws prior_selection Numeric vector prior partitions include power-scaling. Default NULL, takes partitions. likelihood_selection Numeric vector likelihood partitions include power-scaling. Default NULL, takes partitions. num_args (named list) Optional arguments passed num() pretty printing summaries. Can controlled globally via posterior.num_args option.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power-scaling sensitivity analysis — powerscale-sensitivity","text":"Table sensitivity values specified variable.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-sensitivity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Power-scaling sensitivity analysis — powerscale-sensitivity","text":"Kallioinen, N., Paananen, T., Bürkner, P-C., Vehtari, . (2023). Detecting diagnosing prior likelihood sensitivity power-scaling perturbations.  Statistics Computing. 34(57).  doi:10.1007/s11222-023-10366-5 Vehtari, ., Simpson, D., Gelman, ., Yao, Y., Gabry, J. (2024).  Pareto smoothed importance sampling. Journal Machine Learning Research. 25(72). https://jmlr.org/papers/v25/19-556.html Paananen, T., Piironen, J., Bürkner, P-C., Vehtari, . (2021). Implicitly adaptive importance sampling.  Statistics Computing. 31(16).  doi:10.1007/s11222-020-09982-2","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale-sensitivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power-scaling sensitivity analysis — powerscale-sensitivity","text":"","code":"ex <- example_powerscale_model() powerscale_sensitivity(ex$draws) #> Sensitivity based on cjs_dist: #> # A tibble: 2 × 4 #>   variable prior likelihood diagnosis           #>   <chr>    <dbl>      <dbl> <chr>               #> 1 mu       0.435      0.644 prior-data conflict #> 2 sigma    0.361      0.677 prior-data conflict"},{"path":"https://n-kall.github.io/priorsense/reference/powerscale_derivative.html","id":null,"dir":"Reference","previous_headings":"","what":"Derivative with respect to power-scaling — powerscale_derivative","title":"Derivative with respect to power-scaling — powerscale_derivative","text":"Calculate analytical derivative quantity respect power-scaling prior likelihood.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale_derivative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derivative with respect to power-scaling — powerscale_derivative","text":"","code":"powerscale_derivative(x, log_component, quantity = \"mean\", ...)"},{"path":"https://n-kall.github.io/priorsense/reference/powerscale_derivative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derivative with respect to power-scaling — powerscale_derivative","text":"x Posterior draws. log_component Log likelihood log prior values. quantity Character specifying quantity interest (default \"mean\"). Options \"mean\", \"sd\", \"var\". ... unused","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale_derivative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derivative with respect to power-scaling — powerscale_derivative","text":"Derivative quantity respect log2 power-scaling factor (alpha).","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale_derivative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derivative with respect to power-scaling — powerscale_derivative","text":"","code":"example_model <- example_powerscale_model() draws <- example_model$draws log_prior <- log_prior_draws(draws, joint = TRUE) posterior::summarise_draws(     posterior::subset_draws(draws, variable = c(\"mu\", \"sigma\")),     mean,     mean_sens = ~powerscale_derivative(.x, log_prior, quantity = \"mean\") ) #> # A tibble: 2 × 3 #>   variable  mean psens_mean #>   <chr>    <dbl>      <dbl> #> 1 mu       9.53      -0.313 #> 2 sigma    0.884      0.145"},{"path":"https://n-kall.github.io/priorsense/reference/powerscale_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic plots for power-scaling sensitivity — powerscale_plots","title":"Diagnostic plots for power-scaling sensitivity — powerscale_plots","text":"Various diagnostic plots power-scaling sensitivity. See Plot Descriptions details.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic plots for power-scaling sensitivity — powerscale_plots","text":"","code":"powerscale_plot_dens(x, ...)  powerscale_plot_ecdf(x, ...)  # S3 method for class 'powerscaled_sequence' powerscale_plot_ecdf(   x,   variable = NULL,   resample = FALSE,   length = 3,   facet_rows = \"component\",   help_text = getOption(\"priorsense.plot_help_text\", TRUE),   colors = NULL,   ... )  powerscale_plot_quantities(x, ...)  # S3 method for class 'powerscaled_sequence' powerscale_plot_quantities(   x,   variable = NULL,   quantity = c(\"mean\", \"sd\"),   div_measure = \"cjs_dist\",   resample = FALSE,   measure_args = NULL,   mcse = TRUE,   quantity_args = NULL,   help_text = getOption(\"priorsense.plot_help_text\", TRUE),   colors = NULL,   ... )"},{"path":"https://n-kall.github.io/priorsense/reference/powerscale_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic plots for power-scaling sensitivity — powerscale_plots","text":"x object class powerscaled_sequence object powerscale_sequence first run . ... Arguments passed powerscale_sequence x class powerscaled_sequence. variable character vector variable names. NULL (default) variables plotted. resample Logical; Indicate whether draws resampled based calculated importance weights. length Numeric specifying many alpha values used. Ignored object class powerscaled_sequence. facet_rows Character defining rows plot facets, either \"variable\" \"component\". Default \"variable\". help_text Logical indicating whether title subtitle explanatory description included plot. Default TRUE. Can set via option \"priorsense.show_help_text\". colors Character vector colors used plots. Either length 3 powerscale_plot_ecdf powerscale_plot_dens order lowest, base, highest; length 2 powerscale_plot_quantities order low Pareto k, high Pareto k. NULL defaults used. quantity character vector specifying one several quantities plot. Options \"mean\", \"median\", \"sd\", \"mad\", \"quantile\". div_measure divergence measure use. following methods implemented: \"cjs_dist\": Cumulative Jensen-Shannon distance. Default method. See function cjs_dist details. \"js_dist\": Jensen-Shannon distance. \"js_div\": Jensen-Shannon divergence. \"hellinger_dist\": Hellinger distance. \"kl_dist\": Kullback-Leibler distance. \"kl_div\": Kullback-Leibler divergence. \"ks_dist\": Kolmogorov-Smirnov distance. \"hellinger_dist\": Hellinger distance. \"ws_dist\": Wassterstein distance (pass measure_args = list(p = N)) different order, N order. measure_args Named list arguments passed divergence measure functions. mcse Boolean; TRUE plot +/- 2 * Monte Carlo standard error base quantity quantities plot. quantity_args Named list arguments passed quantity functions. Passed .args [posterior::summarise_draws].","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic plots for power-scaling sensitivity — powerscale_plots","text":"ggplot object can customized using ggplot2 package.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale_plots.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"Diagnostic plots for power-scaling sensitivity — powerscale_plots","text":"powerscale_plot_dens() Kernel density plot power-scaled posterior draws respect power-scaling. powerscale_plot_ecdf() Empirical cumulative distribution function plot power-scaled posterior draws respect power-scaling. powerscale_plot_quantities() Plot posterior quantities respect power-scaling.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/powerscale_plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic plots for power-scaling sensitivity — powerscale_plots","text":"","code":"ex <- example_powerscale_model()  powerscale_plot_dens(ex$draws)"},{"path":"https://n-kall.github.io/priorsense/reference/predictions_as_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"brms predictions as draws — predictions_as_draws","title":"brms predictions as draws — predictions_as_draws","text":"Create predictions using brms functions convert draws format","code":""},{"path":"https://n-kall.github.io/priorsense/reference/predictions_as_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"brms predictions as draws — predictions_as_draws","text":"","code":"predictions_as_draws(   x,   predict_fn,   prediction_names = NULL,   warn_dims = getOption(\"priorsense.warn\", TRUE),   ... )"},{"path":"https://n-kall.github.io/priorsense/reference/predictions_as_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"brms predictions as draws — predictions_as_draws","text":"x brmsfit object predict_fn function predictions prediction_names optional names predictions warn_dims throw warning coercing predict_fn's output 3 margins 2 margins? ... arguments passed predict_fn","code":""},{"path":"https://n-kall.github.io/priorsense/reference/predictions_as_draws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"brms predictions as draws — predictions_as_draws","text":"draws array predictions","code":""},{"path":"https://n-kall.github.io/priorsense/reference/predictions_as_draws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"brms predictions as draws — predictions_as_draws","text":"","code":"library(brms) #> Loading required package: Rcpp #> Loading 'brms' package (version 2.22.0). Useful instructions #> can be found by typing help('brms'). A more detailed introduction #> to the package is available through vignette('brms_overview'). #>  #> Attaching package: ‘brms’ #> The following object is masked from ‘package:stats’: #>  #>     ar  if (\"log_prior_draws.brmsfit\" %in% methods(log_prior_draws) &&     (\"log_lik_draws.brmsfit\" %in% methods(log_lik_draws))) {   fit <- brm(     yield ~ N * P * K,     data = npk,     prior = prior(normal(0, 1), class = \"b\"),     refresh = 0   )    powerscale_sensitivity(       fit,       variable = \"_pred\",       prediction = function(x) predictions_as_draws(                                  x, brms::posterior_epred                                )   ) } #> Compiling Stan program... #> Start sampling #> Sensitivity based on cjs_dist: #> # A tibble: 24 × 4 #>    variable   prior likelihood diagnosis           #>    <chr>      <dbl>      <dbl> <chr>               #>  1 _pred[1]  0.0849     0.136  prior-data conflict #>  2 _pred[2]  0.0789     0.0988 prior-data conflict #>  3 _pred[3]  0.0251     0.0853 -                   #>  4 _pred[4]  0.0394     0.0546 -                   #>  5 _pred[5]  0.0746     0.115  prior-data conflict #>  6 _pred[6]  0.0519     0.0586 prior-data conflict #>  7 _pred[7]  0.0621     0.115  prior-data conflict #>  8 _pred[8]  0.0333     0.0879 -                   #>  9 _pred[9]  0.0333     0.0879 -                   #> 10 _pred[10] 0.0519     0.0586 prior-data conflict #> # ℹ 14 more rows"},{"path":"https://n-kall.github.io/priorsense/reference/priorsense-package.html","id":null,"dir":"Reference","previous_headings":"","what":"priorsense: Prior (and likelihood) diagnostics and sensitivity analysis — priorsense-package","title":"priorsense: Prior (and likelihood) diagnostics and sensitivity analysis — priorsense-package","text":"priorsense package provides functions prior likelihood sensitivity analysis Bayesian models. Currently implements methods determine sensitivity posterior power-scaling perturbations prior likelihood.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/priorsense-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"priorsense: Prior (and likelihood) diagnostics and sensitivity analysis — priorsense-package","text":"main diagnostic function provided priorsense powerscale_sensitivity. Given fitted model draws object, computes powerscaling sensitivity diagnostic described Kallioinen et al. (2023). perturbing prior likelihood computing effect posterior, without needing refit model (using Pareto smoothed importance sampling importance weighted moment matching; Vehtari et al. 2022, Paananen et al. 2021). addition, visual diagnostics available first using powerscale_sequence create sequence perturbed posteriors, plot function powerscale_plot_ecdf visualise change. following global options available: priorsense.plot_help_text: TRUE (default), priorsense plots include title explanatory text. FALSE .","code":""},{"path":"https://n-kall.github.io/priorsense/reference/priorsense-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"priorsense: Prior (and likelihood) diagnostics and sensitivity analysis — priorsense-package","text":"Kallioinen, N., Paananen, T., Bürkner, P-C., Vehtari, . (2023). Detecting diagnosing prior likelihood sensitivity power-scaling perturbations.  Statistics Computing. 34(57).  doi:10.1007/s11222-023-10366-5 Vehtari, ., Simpson, D., Gelman, ., Yao, Y., Gabry, J. (2024).  Pareto smoothed importance sampling. Journal Machine Learning Research. 25(72). https://jmlr.org/papers/v25/19-556.html Paananen, T., Piironen, J., Bürkner, P-C., Vehtari, . (2021). Implicitly adaptive importance sampling.  Statistics Computing. 31(16).  doi:10.1007/s11222-020-09982-2","code":""},{"path":[]},{"path":"https://n-kall.github.io/priorsense/reference/priorsense-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"priorsense: Prior (and likelihood) diagnostics and sensitivity analysis — priorsense-package","text":"Maintainer: Noa Kallioinen noa.kallioinen@aalto.fi [copyright holder] Authors: Topi Paananen Paul-Christian Bürkner Aki Vehtari contributors: Frank Weber [contributor]","code":""},{"path":"https://n-kall.github.io/priorsense/reference/scaled_log_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate importance ratios based on scaling of component — scaled_log_ratio","title":"Calculate importance ratios based on scaling of component — scaled_log_ratio","text":"Calculate importance ratios based scaling component","code":""},{"path":"https://n-kall.github.io/priorsense/reference/scaled_log_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate importance ratios based on scaling of component — scaled_log_ratio","text":"","code":"scaled_log_ratio(component_draws, alpha, ...)"},{"path":"https://n-kall.github.io/priorsense/reference/scaled_log_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate importance ratios based on scaling of component — scaled_log_ratio","text":"component_draws draws component powerscale alpha scaling factor ... unused","code":""},{"path":"https://n-kall.github.io/priorsense/reference/scaled_log_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate importance ratios based on scaling of component — scaled_log_ratio","text":"log ratio","code":""},{"path":"https://n-kall.github.io/priorsense/reference/weighted_quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted quantities — weighted_quantities","title":"Weighted quantities — weighted_quantities","text":"Weighted version common quantities interest.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/weighted_quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted quantities — weighted_quantities","text":"x Numeric vector calculate quantity . weights Vector weights corresponding values x. probs Vector probabilities quantiles. type Character vector specifying type quantiles (either \"7\" Type 7 (default) \"hd\" Harrell-Davis) ... Currently unused.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/weighted_quantities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted quantities — weighted_quantities","text":"Named vector calculated quantity.","code":""},{"path":"https://n-kall.github.io/priorsense/reference/weighted_summary_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted summary measures — weighted_summary_measures","title":"Weighted summary measures — weighted_summary_measures","text":"Returns weighted versions posterior::default_summary_measures() used posterior::summarise_draws().","code":""},{"path":"https://n-kall.github.io/priorsense/reference/weighted_summary_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted summary measures — weighted_summary_measures","text":"","code":"weighted_summary_measures(x)"},{"path":"https://n-kall.github.io/priorsense/reference/weighted_summary_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted summary measures — weighted_summary_measures","text":"x draws object extract weights ","code":""},{"path":"https://n-kall.github.io/priorsense/reference/weighted_summary_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted summary measures — weighted_summary_measures","text":"Vector formulas use posterior::summarise_draws()","code":""},{"path":"https://n-kall.github.io/priorsense/news/index.html","id":"priorsense-103","dir":"Changelog","previous_headings":"","what":"priorsense 1.0.3","title":"priorsense 1.0.3","text":"Fix issue model parameter named “alpha”","code":""},{"path":"https://n-kall.github.io/priorsense/news/index.html","id":"priorsense-102","dir":"Changelog","previous_headings":"","what":"priorsense 1.0.2","title":"priorsense 1.0.2","text":"CRAN release: 2024-07-16 Fix Pareto smoothing weights Improvements vignette","code":""},{"path":"https://n-kall.github.io/priorsense/news/index.html","id":"priorsense-101","dir":"Changelog","previous_headings":"","what":"priorsense 1.0.1","title":"priorsense 1.0.1","text":"CRAN release: 2024-06-24 Fixes documentation description","code":""},{"path":"https://n-kall.github.io/priorsense/news/index.html","id":"priorsense-100","dir":"Changelog","previous_headings":"","what":"priorsense 1.0.0","title":"priorsense 1.0.0","text":"CRAN release: 2024-06-20 First stable release","code":""}]
